pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '20'))
    ansiColor('xterm')
    timestamps()
  }

  tools {
    jdk 'JDK-21'
    maven 'Maven-3.9'
  }

  parameters {
    string(name: 'BASE_URL', defaultValue: 'https://www.ventus-itservices.de', description: 'Target base URL')
    string(name: 'TAGS', defaultValue: '', description: 'Cucumber tag expression, e.g. @smoke or @smoke and not @wip')
    choice(name: 'BROWSER', choices: ['chrome'], description: 'Selenium browser (extend as needed)')
    booleanParam(name: 'HEADLESS', defaultValue: true, description: 'Run browser headless')
    booleanParam(name: 'PUBLISH_TO_XRAY', defaultValue: true, description: 'Upload cucumber.json to Xray')
  }

  environment {
    // Allure Jenkins plugin will read results from this folder
    ALLURE_RESULTS = 'target/allure-results'
    CUC_JSON       = 'target/cucumber.json'
    CUC_HTML_DIR   = 'target/cucumber-report/cucumber-html-reports'
    // Xray Cloud (change if you use Server/DC)
    XRAY_BASE      = 'https://xray.cloud.getxray.app/api/v2'
    JIRA_PROJECT_KEY = 'VENTUS'
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Test') {
      steps {
        script {
          // Compose Cucumber options
          def cucPlugins = 'pretty,json:target/cucumber.json,html:target/cucumber-report.html,io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm,summary'
          def tagOpt = params.TAGS?.trim() ? "-Dcucumber.filter.tags=\"${params.TAGS}\"" : ''

          if (isUnix()) {
            sh """
              mvn -B -q \
                -Dtest=bdd.CucumberTestSuite \
                -DbaseUrl="${params.BASE_URL}" \
                -Dheadless=${params.HEADLESS} \
                -Dbrowser=${params.BROWSER} \
                "-Dcucumber.plugin=${cucPlugins}" \
                ${tagOpt} \
                clean verify
            """
          } else {
            bat """
              mvn -B -q ^
                -Dtest=bdd.CucumberTestSuite ^
                -DbaseUrl="${params.BASE_URL}" ^
                -Dheadless=${params.HEADLESS} ^
                -Dbrowser=${params.BROWSER} ^
                "-Dcucumber.plugin=${cucPlugins}" ^
                ${tagOpt} ^
                clean verify
            """
          }
        }
      }
      post {
        always {
          // JUnit results (if you also enable junit:target/cucumber-junit.xml in plugin list)
          junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml, target/failsafe-reports/*.xml, target/cucumber-junit.xml'
          // Keep raw artifacts
          archiveArtifacts allowEmptyArchive: true, artifacts: 'target/cucumber.json, target/cucumber-report/**, target/allure-results/**'
        }
      }
    }

    stage('Publish Reports') {
      steps {
        // Allure report (requires Allure Jenkins plugin)
        allure includeProperties: false, jdk: '', results: [[path: "${ALLURE_RESULTS}"]], reportBuildPolicy: 'ALWAYS'

        // Publish HTML report generated by maven-cucumber-reporting
        publishHTML(target: [
          reportDir: "${CUC_HTML_DIR}",
          reportFiles: 'overview-features.html',
          reportName: 'Cucumber HTML Report',
          keepAll: true,
          alwaysLinkToLastBuild: true,
          allowMissing: true
        ])
      }
    }

    stage('Publish to Xray') {
      when { allOf { expression { params.PUBLISH_TO_XRAY }; expression { fileExists(env.CUC_JSON) } } }
      steps {
        withCredentials([
          string(credentialsId: 'xray-client-id', variable: 'XRAY_CLIENT_ID'),
          string(credentialsId: 'xray-client-secret', variable: 'XRAY_CLIENT_SECRET')
        ]) {
          script {
            if (isUnix()) {
              sh """
                TOKEN=\$(curl -s -H 'Content-Type: application/json' \
                  --data '{ "client_id": "${XRAY_CLIENT_ID}", "client_secret": "${XRAY_CLIENT_SECRET}" }' \
                  ${XRAY_BASE}/authenticate | tr -d '"')

                curl -s -H "Authorization: Bearer \$TOKEN" \
                  -F "info={\\"fields\\":{\\"project\\":{\\"key\\":\\"${JIRA_PROJECT_KEY}\\"},\\"summary\\":\\"Ventus – Selenium Execution \$(date +%F_%T)\\"}}" \
                  -F "results=@${CUC_JSON};type=application/json" \
                  ${XRAY_BASE}/import/execution/cucumber/multipart
              """
            } else {
              // Windows PowerShell variant
              powershell """
                \$body = @{ client_id='${XRAY_CLIENT_ID}'; client_secret='${XRAY_CLIENT_SECRET}' } | ConvertTo-Json
                \$token = (Invoke-RestMethod -Method Post -Uri '${XRAY_BASE}/authenticate' -ContentType 'application/json' -Body \$body).Trim('"')
                Invoke-RestMethod -Method Post -Uri '${XRAY_BASE}/import/execution/cucumber/multipart' `
                  -Headers @{ Authorization = "Bearer \$token" } `
                  -Form @{ info = '{ "fields": { "project": { "key": "${JIRA_PROJECT_KEY}" }, "summary": "Ventus – Selenium Execution $(Get-Date -Format s)" } }'
                           results = Get-Item '${env.WORKSPACE}\\${CUC_JSON}' }
              """
            }
          }
        }
      }
    }
  }

  post {
    always {
      echo "Build finished: ${currentBuild.currentResult}"
    }
  }
}0